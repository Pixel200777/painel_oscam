from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_jwt_extended import JWTManager, jwt_required, get_jwt_identity

app = Flask(__name__)

# Configurações do App
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://usuario:senha@localhost/oscam_db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['JWT_SECRET_KEY'] = 'chave_secreta'

db = SQLAlchemy(app)
jwt = JWTManager(app)

# Modelos
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    credits = db.Column(db.Float, default=0.0)

class Line(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    active = db.Column(db.Boolean, default=True)

# Rota para Login (já existente)
@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    user = User.query.filter_by(username=data['username']).first()
    if not user:
        return jsonify({"message": "Usuário não encontrado!"}), 404

    access_token = create_access_token(identity={"id": user.id, "username": user.username})
    return jsonify({"access_token": access_token, "user": {"id": user.id, "username": user.username}}), 200

# Nova rota para estatísticas do Dashboard
@app.route('/dashboard-stats', methods=['GET'])
@jwt_required()
def dashboard_stats():
    current_user = get_jwt_identity()
    user = User.query.filter_by(id=current_user['id']).first()

    if not user:
        return jsonify({"message": "Usuário não encontrado!"}), 404

    # Calcular estatísticas
    total_lines = Line.query.filter_by(user_id=user.id, active=True).count()
    stats = {
        "lines": total_lines,
        "credits": user.credits
    }

    return jsonify(stats), 200

if __name__ == '__main__':
    app.run(debug=True)
